/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.sales;

import Business.Business;
import Business.Market.Market;
import Business.Market.MarketOffer;
import Business.Person.Person;
import Business.Person.SalesPerson;
import Business.Users.User;
import Business.customer.Customer;
import Business.sales.OrderItems;
import Business.sales.OrderItemsCat;
import Business.sales.PurchaseOrder;
import Business.supplier.Product;
import Business.supplier.Supplier;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author sreer
 */
public class OrderJPanel extends javax.swing.JPanel implements TableModelListener {

    /**
     * Creates new form OrderJPanel
     */
    JPanel userProcessContainerjPanel;
    Business business;
    Market market;
    Customer customer;
    MarketOffer marketOffer;
    OrderItems orderItems;
    OrderItemsCat orderItemsCat;
    PurchaseOrder purchaseOrder;
    SalesPerson salesPerson;
    DecimalFormat df;
    String numberRegex,decimalNumRegex;
    double commission = 0.0;
    int quantityRemaining = 0;
    
    public OrderJPanel(JPanel userProcessContainerjPanel,Business business,Market market,Customer customer) {
        initComponents();
        this.userProcessContainerjPanel = userProcessContainerjPanel;
        this.business = business;
        this.market = market;
        this.customer = customer;
        System.out.println(market.getMarketType());
        this.marketOffer = business.getMarketOfferCatalog().searchMarketOffer(market);
        System.out.println(marketOffer.getMarket().getMarketType());
        customerNamejTextField.setText(customer.getCustomerName());
        marketTypeNamejTextField1.setText(market.getMarketType());
        df = new DecimalFormat("#0.00");
        numberRegex = "[0-9]+";
        decimalNumRegex = "[0-9]+(\\.[0-9][0-9]?)?";
        
        populateproducts();
        availableItemsjTable.getModel().addTableModelListener((TableModelListener) this);       
        addButtonjButton.setEnabled(false);
    }
    
    public void populateproducts(){
        int rowCount = availableItemsjTable.getRowCount();
        
        DefaultTableModel dtm = (DefaultTableModel) availableItemsjTable.getModel();

        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
        int count = 0;
        for (Supplier s :business.getSupplierDirectory().getSupplierDirectory()) // 1st time getProductCatalog() is called in supplier and 2nd time the same method is called in product Catalog class. So we have 2 getProductCatalog()
        {
            for(Product p : s.getProductDirectory().getProduct() )
            {
                count++;
                Object row[] = new Object[12];
                row[0] = count;                   // we hv created toString() so that, inspite of giving address of object we will get product name
                row[1] = p;
                row[2] = p.getProductName();
                row[3] = s;
                row[4] = s.getSupplierName();
                row[5] = p.getQuantity();
                String floor = df.format((100+marketOffer.getFloorPrice())*p.getPrice()/100);
                row[6] = floor ;
                String target = df.format((100+marketOffer.getTargetPrice())*p.getPrice()/100);
                row[7] = target;
                String ceiling = df.format((100+marketOffer.getCeilingPrice())*p.getPrice()/100);
                row[8] = ceiling ;
                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderPlacedJTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        availableItemsjTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        totalSalesTextField = new javax.swing.JTextField();
        addButtonjButton = new javax.swing.JButton();
        deleteItemBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        myCommissionjTextField = new javax.swing.JTextField();
        finaliseOrderBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        customerNamejTextField = new javax.swing.JTextField();
        marketTypeNamejTextField1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Dialog", 3, 30)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Place an Order");

        orderPlacedJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sno.", "ProductId", "Product Name", "Supplier Id", "Supplier Name", "Available Quantity", "Quantity Required", "Total Selling Price", "Commission", "Above Target"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderPlacedJTable);

        availableItemsjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sno.", "ProductId", "Product", "SupplierId", "Supplier", "Available Quantity", "Floor", "Target", "Ceiling", "Quantity Required", "Selling Price Per Item", "Total Selling Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        availableItemsjTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                availableItemsjTableFocusLost(evt);
            }
        });
        availableItemsjTable.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                availableItemsjTableCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                availableItemsjTableInputMethodTextChanged(evt);
            }
        });
        availableItemsjTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                availableItemsjTableKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                availableItemsjTableKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(availableItemsjTable);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Selected Items");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("Available Items");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("Total Sales");

        totalSalesTextField.setEditable(false);
        totalSalesTextField.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        totalSalesTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalSalesTextFieldActionPerformed(evt);
            }
        });

        addButtonjButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addButtonjButton.setText("Add Item");
        addButtonjButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.darkGray, null, null));
        addButtonjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonjButtonActionPerformed(evt);
            }
        });

        deleteItemBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        deleteItemBtn.setText("Delete Item");
        deleteItemBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.darkGray, null, null));
        deleteItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemBtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setText("My Commission");

        myCommissionjTextField.setEditable(false);
        myCommissionjTextField.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        finaliseOrderBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        finaliseOrderBtn.setText("Finalise Order");
        finaliseOrderBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.darkGray, null, null));
        finaliseOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finaliseOrderBtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setText("Customer:");

        customerNamejTextField.setEditable(false);
        customerNamejTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNamejTextFieldActionPerformed(evt);
            }
        });

        marketTypeNamejTextField1.setEditable(false);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel7.setText("Market:");

        backBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        backBtn.setText("<< Back");
        backBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.darkGray, null, null));
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(556, 556, 556))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35))
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(marketTypeNamejTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(customerNamejTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(235, 235, 235)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(myCommissionjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addButtonjButton)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(finaliseOrderBtn)
                .addGap(48, 48, 48)
                .addComponent(deleteItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalSalesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(myCommissionjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(marketTypeNamejTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(customerNamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButtonjButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(totalSalesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteItemBtn)
                    .addComponent(backBtn)
                    .addComponent(finaliseOrderBtn))
                .addContainerGap(46, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void totalSalesTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalSalesTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalSalesTextFieldActionPerformed

    private void addButtonjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonjButtonActionPerformed
        
        int countRow = availableItemsjTable.getRowCount();
        DefaultTableModel defaultTableModel = (DefaultTableModel)orderPlacedJTable.getModel();
        defaultTableModel.setNumRows(0);
        int count = 0;
        double totalSales = 0.0;
        
        for(int i = 0; i < countRow; i++)
        {
            if(availableItemsjTable.getValueAt(i, 11) != null)
            {
                count ++;
                quantityRemaining = Integer.parseInt(availableItemsjTable.getValueAt(i, 5).toString()) - Integer.parseInt(availableItemsjTable.getValueAt(i, 9).toString());
                
                Object row[] = new Object[10];
                row[0] = count;
                row[1] = (Product)availableItemsjTable.getValueAt(i, 1);
                row[2] = availableItemsjTable.getValueAt(i, 2);
                row[3] = (Supplier)availableItemsjTable.getValueAt(i, 3);
                row[4] = availableItemsjTable.getValueAt(i, 4);
                row[5] = quantityRemaining;
                row[6] = availableItemsjTable.getValueAt(i, 9);
                row[7] = availableItemsjTable.getValueAt(i, 11);
                double totalAmount = Double.parseDouble(availableItemsjTable.getValueAt(i, 11).toString());
                row[8] = calculateCommission(i, totalAmount);
                if(Double.parseDouble(availableItemsjTable.getValueAt(i, 10).toString()) > Double.parseDouble(availableItemsjTable.getValueAt(i, 7).toString()))
                {
                    row[9] = true;
                }
                else
                {
                    row[9] = false;
                }
                defaultTableModel.addRow(row);
            }
        }
        calculateTotalSales();
    }//GEN-LAST:event_addButtonjButtonActionPerformed

    private void availableItemsjTableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_availableItemsjTableInputMethodTextChanged
      
    }//GEN-LAST:event_availableItemsjTableInputMethodTextChanged

    private void availableItemsjTableCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_availableItemsjTableCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_availableItemsjTableCaretPositionChanged

    private void availableItemsjTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_availableItemsjTableKeyPressed
        
    }//GEN-LAST:event_availableItemsjTableKeyPressed

    private void availableItemsjTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_availableItemsjTableFocusLost
        
    }//GEN-LAST:event_availableItemsjTableFocusLost

    private void availableItemsjTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_availableItemsjTableKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_availableItemsjTableKeyTyped

    private void deleteItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemBtnActionPerformed
        
        int selectedRow = orderPlacedJTable.getSelectedRow();
        DefaultTableModel defaultTableModel = (DefaultTableModel)orderPlacedJTable.getModel();
        
        if(selectedRow >= 0)
        {
            defaultTableModel.removeRow(selectedRow);
        }
        calculateTotalSales();
    }//GEN-LAST:event_deleteItemBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        
        userProcessContainerjPanel.remove(this);
        CardLayout layout = (CardLayout)userProcessContainerjPanel.getLayout();
        layout.previous(userProcessContainerjPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void finaliseOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finaliseOrderBtnActionPerformed
        
        populatePurchaseOrderData();
        
        InvoiceJPanel invoiceJPanel = new InvoiceJPanel(userProcessContainerjPanel,business,purchaseOrder,customer);
        userProcessContainerjPanel.add("InvoiceJPanel",invoiceJPanel);
        CardLayout layout = (CardLayout)userProcessContainerjPanel.getLayout();
        layout.next(userProcessContainerjPanel);
    }//GEN-LAST:event_finaliseOrderBtnActionPerformed

    private void customerNamejTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNamejTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerNamejTextFieldActionPerformed

    public void populatePurchaseOrderData()
    {
        int rowCount = orderPlacedJTable.getRowCount();
        int columnCount = orderPlacedJTable.getColumnCount();
        double totalSales = 0.0;
        int countSales = 0;
        purchaseOrder = business.getPurchaseOrderCat().addPurchaseOrder();
        purchaseOrder.setUser(business.getLoggedUser());
        purchaseOrder.setCustomer(customer);
        purchaseOrder.setMarket(market);
        salesPerson = business.getMapSalesPersonUserDirectory().getSalesPerson(business.getLoggedUser());
        
        for(int j = 0; j < orderPlacedJTable.getRowCount(); j++)
        {
            if(orderPlacedJTable.getValueAt(j, 7) != null)
            {
                totalSales += Double.parseDouble(orderPlacedJTable.getValueAt(j, 7).toString());
            }
        }
        
        for(int i = 0; i < rowCount; i++)
        {
            Supplier supplier = (Supplier)orderPlacedJTable.getValueAt(i, 3);
            Product product = (Product)orderPlacedJTable.getValueAt(i, 1);
            countSales++;
            
            orderItems = purchaseOrder.getOrderItemsCat().addOrderItems();
            orderItems.setSupplier(supplier);
            orderItems.getSupplier().setSupplierName(orderPlacedJTable.getValueAt(i,4).toString());
            orderItems.setProduct(product);
            orderItems.getProduct().setProductName(orderPlacedJTable.getValueAt(i,2).toString());
            orderItems.getProduct().setQuantity(Integer.parseInt(orderPlacedJTable.getValueAt(i,5).toString()));
            orderItems.setReqQantity(Integer.parseInt(orderPlacedJTable.getValueAt(i,6).toString()));
            orderItems.setTotalPrice(Double.parseDouble(orderPlacedJTable.getValueAt(i, 7).toString()));
            orderItems.setCommissionEarned(Double.parseDouble(orderPlacedJTable.getValueAt(i, 8).toString()));
            orderItems.setAboveTarget(Boolean.getBoolean(orderPlacedJTable.getValueAt(i, 9).toString()));
            
            for(int j = 0; j < availableItemsjTable.getRowCount(); j++)
            {
                if(Integer.parseInt(orderPlacedJTable.getValueAt(i, 1).toString()) == Integer.parseInt(availableItemsjTable.getValueAt(j, 1).toString()))
                {
                    orderItems.setFloor(Double.parseDouble(availableItemsjTable.getValueAt(j, 6).toString()));
                    orderItems.setTarget(Double.parseDouble(availableItemsjTable.getValueAt(j, 7).toString()));
                    orderItems.setCeiling(Double.parseDouble(availableItemsjTable.getValueAt(j, 8).toString()));
                }
            }
            salesPerson.setTotalNumberOfSales(countSales);
        }
        purchaseOrder.setTotalPrice(totalSales);
    }
    
    public void calculateTotalSales()
    {
        double totalSales = 0.0;
        
        for(int j = 0; j < orderPlacedJTable.getRowCount(); j++)
        {
            if(orderPlacedJTable.getValueAt(j, 7) != null)
            {
                totalSales += Double.parseDouble(orderPlacedJTable.getValueAt(j, 7).toString());
            }
        }
        totalSalesTextField.setText(String.valueOf(totalSales));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButtonjButton;
    private javax.swing.JTable availableItemsjTable;
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField customerNamejTextField;
    private javax.swing.JButton deleteItemBtn;
    private javax.swing.JButton finaliseOrderBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField marketTypeNamejTextField1;
    private javax.swing.JTextField myCommissionjTextField;
    private javax.swing.JTable orderPlacedJTable;
    private javax.swing.JTextField totalSalesTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {
                
        int row = e.getFirstRow();
        int column = e.getColumn();
        String cellValue = (String)availableItemsjTable.getValueAt(row, column);
        int quantityAvail = 0, cellQuantity = 0;
        double cellSP = 0.0, floorPrice = 0.0, ceilingPrice = 0.0;
        
        try
        {
            quantityAvail = Integer.parseInt(availableItemsjTable.getValueAt(row, 5).toString());
            floorPrice = Double.parseDouble(availableItemsjTable.getValueAt(row, 6).toString());
            ceilingPrice = Double.parseDouble(availableItemsjTable.getValueAt(row, 8).toString());
            if(availableItemsjTable.getValueAt(row, 9) != null)
            {
                cellQuantity = Integer.parseInt((String)availableItemsjTable.getValueAt(row, 9));
            }
            if(availableItemsjTable.getValueAt(row, 10) != null)
            {
                cellSP = Double.parseDouble(availableItemsjTable.getValueAt(row, 10).toString());
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        
        if(cellValue.matches(numberRegex) || cellValue.matches(decimalNumRegex))
        {
            if(Double.parseDouble(cellValue) > 0.0)
            {
                if(cellQuantity <= quantityAvail && cellSP >= floorPrice && cellSP <= ceilingPrice)
                {
                    TableModel model = (TableModel)e.getSource();
                    String columnName = model.getColumnName(column);
                    String col11 = "";
                    try
                    {
                        if(model.getValueAt(row, 11) != null)
                        {
                            col11 = model.getValueAt(row, 11).toString();
                        }
                    }
                    catch(Exception ex)
                    {
                        ex.printStackTrace();
                    }
                    if(model.getValueAt(row, 10) != null && model.getValueAt(row, 9) != null && col11.isEmpty())
                    {
                        int quantity = Integer.parseInt(model.getValueAt(row, 9).toString());
                        double sellingPrice = Double.parseDouble(model.getValueAt(row, 10).toString());
                        calculateAmount(quantity,sellingPrice);
                    } 
                    if(!col11.isEmpty())
                    {
                        addButtonjButton.setEnabled(true);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Please enter quantity less than or equal to available quantity \nOR \nSelling Price cannot be less than Floor Price.","Warning",JOptionPane.WARNING_MESSAGE);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Enter value greater than 0.","Warning",JOptionPane.WARNING_MESSAGE);
            }
        }
        else
        {   
            JOptionPane.showMessageDialog(null, "Please enter numerical values only.","Warning",JOptionPane.WARNING_MESSAGE);
        }
    }
    
    public void calculateAmount(int quantity,double sellingPrice)
    {
        int selectedRow = availableItemsjTable.getSelectedRow();
        double totalAmount = quantity * sellingPrice;
        System.out.println(totalAmount);
        calculateCommission(totalAmount);
        availableItemsjTable.setValueAt(String.valueOf(totalAmount), selectedRow, 11);
    }
    
    public void calculateCommission(double totalAmount)
    {
        int selectedRow = availableItemsjTable.getSelectedRow();
        double floorPrice = Double.parseDouble(availableItemsjTable.getValueAt(selectedRow,6).toString());
        double targetPrice = Double.parseDouble(availableItemsjTable.getValueAt(selectedRow,7).toString());
        double ceilingPrice = Double.parseDouble(availableItemsjTable.getValueAt(selectedRow,8).toString());
        double cellSellingPrice = Double.parseDouble(availableItemsjTable.getValueAt(selectedRow,10).toString());  
        
        
        if((floorPrice <= cellSellingPrice) &&  (cellSellingPrice < targetPrice))
        {
            commission += Double.parseDouble(df.format((marketOffer.getCommissionBelowTarget()*totalAmount)/100));
        }
        if((targetPrice <= cellSellingPrice) && (cellSellingPrice < ceilingPrice))
        {
            commission += Double.parseDouble(df.format((marketOffer.getCommissionBelowTarget()*totalAmount)/100));
        }
        myCommissionjTextField.setText(String.valueOf(commission));
    }
    
    public double calculateCommission(int i,double totalAmount)
    {
        
        double floorPrice = Double.parseDouble(availableItemsjTable.getValueAt(i,6).toString());
        double targetPrice = Double.parseDouble(availableItemsjTable.getValueAt(i,7).toString());
        double ceilingPrice = Double.parseDouble(availableItemsjTable.getValueAt(i,8).toString());
        double cellSellingPrice = Double.parseDouble(availableItemsjTable.getValueAt(i,10).toString());  
        double commissionPerProduct = 0.0;
        
        if((floorPrice <= cellSellingPrice) &&  (cellSellingPrice < targetPrice))
        {
            commissionPerProduct = Double.parseDouble(df.format((marketOffer.getCommissionBelowTarget()*totalAmount)/100));
        }
        if((targetPrice <= cellSellingPrice) && (cellSellingPrice < ceilingPrice))
        {
            commissionPerProduct = Double.parseDouble(df.format((marketOffer.getCommissionBelowTarget()*totalAmount)/100));
        }
        return commissionPerProduct;
    }
    
}
